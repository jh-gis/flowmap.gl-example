{"version":3,"sources":["App.js","index.js"],"names":["getInitialViewState","geoViewport","viewport","window","innerWidth","innerHeight","undefined","center","longitude","latitude","zoom","bearing","pitch","DARK_COLORS","darkMode","flows","scheme","locationAreas","normal","outlineColor","App","Component","state","locations","thickness","componentDidMount","fetch","process","then","response","json","this","setState","render","animate","pickable","colors","getLocationId","l","properties","GEOID","getLocationCentroid","Centroid","getFlowOriginId","f","origin","getFlowDestId","dest","getFlowMagnitude","count2010","initialViewState","mapboxApiAccessToken","bottom","left","style","backgroundColor","color","ReactDOM","document","getElementById"],"mappings":"0OAKA,MAEMA,EAAsB,KAC1B,MADgC,EAK5BC,IAAYC,SAJH,EAAE,OAAQ,OAAQ,OAAQ,IAMrC,CAACC,OAAOC,WAAYD,OAAOE,kBAC3BC,OACAA,EACA,KAV8B,gBAG9BC,OAH8B,GAYhC,MAAO,CACLC,UAb8B,KAc9BC,SAd8B,KAe9BC,KAf8B,EAI9BA,KAYAC,QAAS,EACTC,MAAO,IAkCLC,EAAc,CAClBC,UAAU,EACVC,MAAO,CACLC,OAAQ,CACN,iBACA,iBACA,iBACA,iBACA,iBACA,mBACA,oBACA,qBACA,qBACA,uBAGJC,cAAe,CACbC,OAAQ,QAEVC,aAAc,QAGD,MAAMC,UAAYC,YAAW,eAAD,oBACzCC,MAAQ,CACNC,UAAW,KACXR,MAAO,KACPS,UAAW,MAGbC,oBACEC,MAAM,GAAD,OACAC,sBADA,kDAGFC,KAAMC,GAAaA,EAASC,QAC5BF,KAAME,GAASC,KAAKC,SAAS,CAAET,UAAWO,KAE7CJ,MAAM,GAAD,OAAIC,sBAAJ,+BACFC,KAAMC,GAAaA,EAASC,QAC5BF,KAAME,GAASC,KAAKC,SAAS,CAAEjB,MAAOe,KAG3CG,SAAU,MAAD,EACsBF,KAAKT,MAA1BP,EADD,EACCA,MAAOQ,EADR,EACQA,UACf,OACE,oCACE,kBAAC,IAAD,CACER,MAAOA,EACPQ,UAAWA,EACXW,SAAS,EACTC,UAAU,EACVC,OAAQvB,EACRwB,cAAgBC,GAAMA,EAAEC,WAAWC,MACnCC,oBAAsBH,GAAMA,EAAEC,WAAWG,SACzCC,gBAAkBC,GAAMA,EAAEC,OAC1BC,cAAgBF,GAAMA,EAAEG,KACxBC,iBAAmBJ,GAAMA,EAAEK,UAC3BC,iBAAkBlD,IAClBmD,qBA9GWxB,6FAgHb,kBAAC,IAAD,CACEyB,OAAQ,GACRC,KAAM,GACNC,MAAO,CAAEC,gBAAiB,OAAQC,MAAO,SAEzC,kBAAC,IAAD,CAAsBpB,OAAQvB,OCtHxC4C,IAASxB,OAAO,kBAAC,EAAD,MAASyB,SAASC,eAAe,U","file":"static/js/main.0a97a4a6.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport geoViewport from \"@mapbox/geo-viewport\";\r\nimport FlowMap, { LegendBox, LocationTotalsLegend } from \"@flowmap.gl/react\";\r\nimport \"./App.css\";\r\n\r\nconst MAPBOX_TOKEN = process.env.REACT_APP_MapboxAccessToken;\r\n\r\nconst getInitialViewState = () => {\r\n  const bbox = [-109.06, 36.99, -102.04, 41.0];\r\n  const {\r\n    center: [longitude, latitude],\r\n    zoom,\r\n  } = geoViewport.viewport(\r\n    bbox,\r\n    [window.innerWidth, window.innerHeight],\r\n    undefined,\r\n    undefined,\r\n    512\r\n  );\r\n  return {\r\n    longitude,\r\n    latitude,\r\n    zoom,\r\n    bearing: 0,\r\n    pitch: 0,\r\n  };\r\n};\r\n\r\nconst colors = {\r\n  flows: {\r\n    scheme: [\r\n      // Teal scheme from https://carto.com/carto-colors/\r\n      \"#d1eeea\",\r\n      \"#a8dbd9\",\r\n      \"#85c4c9\",\r\n      \"#68abb8\",\r\n      \"#4f90a6\",\r\n      \"#3b738f\",\r\n      \"#2a5674\",\r\n    ],\r\n    highlighted: [\r\n      // Teal scheme from https://carto.com/carto-colors/\r\n      \"#d1eeea\",\r\n      \"#a8dbd9\",\r\n      \"#85c4c9\",\r\n      \"#68abb8\",\r\n      \"#4f90a6\",\r\n      \"#3b738f\",\r\n      \"#2a5674\",\r\n    ],\r\n  },\r\n  locationAreas: {\r\n    outline: \"rgba(92,112,128,0.5)\",\r\n    normal: \"rgba(187,187,187,0.5)\",\r\n    selected: \"rgba(217,130,43,0.5)\",\r\n  },\r\n};\r\n\r\nconst DARK_COLORS = {\r\n  darkMode: true,\r\n  flows: {\r\n    scheme: [\r\n      \"rgb(0, 22, 61)\",\r\n      \"rgb(0, 27, 62)\",\r\n      \"rgb(0, 36, 68)\",\r\n      \"rgb(0, 48, 77)\",\r\n      \"rgb(3, 65, 91)\",\r\n      \"rgb(48, 87, 109)\",\r\n      \"rgb(85, 115, 133)\",\r\n      \"rgb(129, 149, 162)\",\r\n      \"rgb(179, 191, 197)\",\r\n      \"rgb(240, 240, 240)\",\r\n    ],\r\n  },\r\n  locationAreas: {\r\n    normal: \"#334\",\r\n  },\r\n  outlineColor: \"#000\",\r\n};\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    locations: null,\r\n    flows: null,\r\n    thickness: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      `${process.env.PUBLIC_URL}/data/US_Counties_AND_Centroids_NoPR_5.5.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((json) => this.setState({ locations: json }));\r\n\r\n    fetch(`${process.env.PUBLIC_URL}/data/CO_Origin_flows.json`)\r\n      .then((response) => response.json())\r\n      .then((json) => this.setState({ flows: json }));\r\n  }\r\n\r\n  render() {\r\n    const { flows, locations } = this.state;\r\n    return (\r\n      <>\r\n        <FlowMap\r\n          flows={flows}\r\n          locations={locations}\r\n          animate={true}\r\n          pickable={true}\r\n          colors={DARK_COLORS}\r\n          getLocationId={(l) => l.properties.GEOID}\r\n          getLocationCentroid={(l) => l.properties.Centroid}\r\n          getFlowOriginId={(f) => f.origin}\r\n          getFlowDestId={(f) => f.dest}\r\n          getFlowMagnitude={(f) => f.count2010}\r\n          initialViewState={getInitialViewState()}\r\n          mapboxApiAccessToken={MAPBOX_TOKEN}\r\n        />\r\n        <LegendBox\r\n          bottom={35}\r\n          left={10}\r\n          style={{ backgroundColor: \"#CCC\", color: \"#000\" }}\r\n        >\r\n          <LocationTotalsLegend colors={DARK_COLORS} />\r\n        </LegendBox>\r\n      </>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n"],"sourceRoot":""}