{"version":3,"sources":["App.js","index.js"],"names":["getInitialViewState","geoViewport","viewport","window","innerWidth","innerHeight","undefined","center","longitude","latitude","zoom","bearing","pitch","colors","flows","scheme","locationAreas","outline","normal","selected","App","state","locations","fetch","process","then","response","json","setState","this","layers","push","FlowMapLayer","getLocationId","l","properties","GEOID","getLocationCentroid","Centroid","getFlowOriginId","f","origin","getFlowDestId","dest","getFlowMagnitude","count2010","initialViewState","controller","mapboxApiAccessToken","Component","ReactDOM","render","document","getElementById","write"],"mappings":"gVAUMA,G,OAAsB,WAC1B,IACA,EAGIC,IAAYC,SAJH,EAAE,OAAQ,OAAQ,OAAQ,IAMrC,CAACC,OAAOC,WAAYD,OAAOE,kBAC3BC,OACAA,EACA,KARF,gBACEC,OADF,GAUA,MAAO,CACLC,UAXF,KAYEC,SAZF,KAaEC,KAbF,EAEEA,KAYAC,QAAS,EACTC,MAAO,KAILC,EAAS,CACbC,MAAO,CACLC,OAAQ,CAEN,UACA,UACA,UACA,UACA,UACA,UACA,YAGJC,cAAe,CACbC,QAAS,uBACTC,OAAQ,wBACRC,SAAU,yBAIOC,E,4MACnBC,MAAQ,CACNC,UAAW,KACXR,MAAO,M,uDAGT,WAAqB,IAAD,OAClBS,MAAM,GAAD,OACAC,sBADA,kDAGFC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAU,EAAKC,SAAS,CAAEN,UAAWK,OAE7CJ,MAAM,GAAD,OAAIC,sBAAJ,+BACFC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACE,GAAD,OAAU,EAAKC,SAAS,CAAEd,MAAOa,S,oBAG3C,WACE,MAA6BE,KAAKR,MAA1BC,EAAR,EAAQA,UAAWR,EAAnB,EAAmBA,MACbgB,EAAS,GAgBf,OAfIR,GAAaR,GACfgB,EAAOC,KACL,IAAIC,IAAa,CACfnB,SACAS,YACAR,QACAmB,cAAe,SAACC,GAAD,OAAOA,EAAEC,WAAWC,OACnCC,oBAAqB,SAACH,GAAD,OAAOA,EAAEC,WAAWG,UACzCC,gBAAiB,SAACC,GAAD,OAAOA,EAAEC,QAC1BC,cAAe,SAACF,GAAD,OAAOA,EAAEG,MACxBC,iBAAkB,SAACJ,GAAD,OAAOA,EAAEK,cAM/B,kBAAC,IAAD,CACEC,iBAAkB9C,IAClB+C,YAAY,EACZjB,OAAQA,GAER,kBAAC,IAAD,CAAWkB,qBArFExB,kG,GA2CYyB,aC/CjCC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SAEjDD,SAASE,MAAT,uQ","file":"static/js/main.5466c593.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { StaticMap } from \"react-map-gl\";\r\nimport { DeckGL } from \"deck.gl\";\r\nimport FlowMapLayer from \"@flowmap.gl/core\";\r\nimport geoViewport from \"@mapbox/geo-viewport\";\r\n\r\nimport \"./App.css\";\r\n\r\nconst MAPBOX_TOKEN = process.env.REACT_APP_MapboxAccessToken;\r\n\r\nconst getInitialViewState = () => {\r\n  const bbox = [-109.06, 36.99, -102.04, 41.0];\r\n  const {\r\n    center: [longitude, latitude],\r\n    zoom,\r\n  } = geoViewport.viewport(\r\n    bbox,\r\n    [window.innerWidth, window.innerHeight],\r\n    undefined,\r\n    undefined,\r\n    512\r\n  );\r\n  return {\r\n    longitude,\r\n    latitude,\r\n    zoom,\r\n    bearing: 0,\r\n    pitch: 0,\r\n  };\r\n};\r\n\r\nconst colors = {\r\n  flows: {\r\n    scheme: [\r\n      // Teal scheme from https://carto.com/carto-colors/\r\n      \"#d1eeea\",\r\n      \"#a8dbd9\",\r\n      \"#85c4c9\",\r\n      \"#68abb8\",\r\n      \"#4f90a6\",\r\n      \"#3b738f\",\r\n      \"#2a5674\",\r\n    ],\r\n  },\r\n  locationAreas: {\r\n    outline: \"rgba(92,112,128,0.5)\",\r\n    normal: \"rgba(187,187,187,0.5)\",\r\n    selected: \"rgba(217,130,43,0.5)\",\r\n  },\r\n};\r\n\r\nexport default class App extends Component {\r\n  state = {\r\n    locations: null,\r\n    flows: null,\r\n  };\r\n\r\n  componentDidMount() {\r\n    fetch(\r\n      `${process.env.PUBLIC_URL}/data/US_Counties_AND_Centroids_NoPR_5.5.json`\r\n    )\r\n      .then((response) => response.json())\r\n      .then((json) => this.setState({ locations: json }));\r\n\r\n    fetch(`${process.env.PUBLIC_URL}/data/CO_origin_flows.json`)\r\n      .then((response) => response.json())\r\n      .then((json) => this.setState({ flows: json }));\r\n  }\r\n\r\n  render() {\r\n    const { locations, flows } = this.state;\r\n    const layers = [];\r\n    if (locations && flows) {\r\n      layers.push(\r\n        new FlowMapLayer({\r\n          colors,\r\n          locations,\r\n          flows,\r\n          getLocationId: (l) => l.properties.GEOID,\r\n          getLocationCentroid: (l) => l.properties.Centroid,\r\n          getFlowOriginId: (f) => f.origin,\r\n          getFlowDestId: (f) => f.dest,\r\n          getFlowMagnitude: (f) => f.count2010,\r\n        })\r\n      );\r\n    }\r\n\r\n    return (\r\n      <DeckGL\r\n        initialViewState={getInitialViewState()}\r\n        controller={true}\r\n        layers={layers}\r\n      >\r\n        <StaticMap mapboxApiAccessToken={MAPBOX_TOKEN} />\r\n      </DeckGL>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\ndocument.write(\r\n  `<a href=\"https://jh-gis.github.io/flowmap.gl-example/\">\r\n    <img \r\n      style=\"position: absolute; top: 0; right: 0; border: 0;\" \r\n      src=\"https://s3.amazonaws.com/github/ribbons/forkme_right_gray_6d6d6d.png\" \r\n      alt=\"Fork me on GitHub\">\r\n   </a>\r\n `\r\n);\r\n"],"sourceRoot":""}